

Windowsでこのプログラムを実行するためには、以下の手順に従ってPythonと必要なツールをインストールしてください。

### 前提条件
1. **Pythonのインストール(3.10以上)**  
   - [Python公式サイト](https://www.python.org/downloads/)から最新のPythonをダウンロードし、インストールしてください。
   - インストール時に「Add Python to PATH」にチェックを入れることを忘れずに選択してください。

2. **mrc2tifの準備**  
   - このプログラムでは、MRCファイルをTIFF形式に変換するために`mrc2tif`コマンドが必要です。`mrc2tif`がWindows環境にない場合は、以下の手順でインストールまたは配置します。
     - `mrc2tif`のWindows用バイナリが手に入らない場合、同様の機能を持つ別の変換ツールや、Pythonでのライブラリを検討する必要があります。

### プログラムの実行方法
1. **コードの準備**  
   - 上記のコードを新しいPythonファイルにコピーし、`compression_tool.py`などの名前で保存します。

2. **Tkinterと他の必要なモジュールのインストール**  
   TkinterはPython標準ライブラリに含まれているため、通常追加インストールは不要です。  
   ただし、必要に応じて以下のコマンドで確認・インストールします:
   ```bash
   pip install tk
   ```

3. **プログラムの実行**
   - コマンドプロンプトでプログラムが保存されているディレクトリに移動し、以下のコマンドを実行します。
   ```bash
   python compression_tool.py
   ```

プログラムが実行され、GUIが立ち上がります。入力フォルダや出力フォルダのパスを設定し、ファイル圧縮を開始することができます。

ありがとうございます！それでは、以下の手順で `mrc2tif` をインストールし、Windowsでこのツールを実行できるように設定します。

### mrc2tifのインストール手順
1. **3dmodのダウンロード**
   - [IMODの公式サイト](https://bio3d.colorado.edu/imod/download.html#Latest-Windows) から、Windows用の最新バージョンのIMODソフトウェアをダウンロードします。

2. **IMODのインストール**
   - ダウンロードしたインストーラーを実行し、指示に従ってIMODをインストールします。インストール中、`mrc2tif` ユーティリティも一緒にインストールされます。

3. **環境変数の設定**
   - `mrc2tif` をコマンドラインから利用できるようにするため、インストール先フォルダをWindowsの「環境変数」に追加します。
   - 「システム環境変数の編集」を開き、「システム環境変数」の「Path」にIMODのインストール先フォルダ（例: `C:\Program Files\IMOD\bin`）を追加します。

4. **動作確認**
   - コマンドプロンプトを開き、`mrc2tif` と入力してEnterキーを押します。ヘルプメッセージが表示されれば、正常にインストールされています。

### 動作環境
IMODと `mrc2tif` がインストールされると、上記のPythonコードをWindowsでも実行できるようになります。


このツールを動かすために必要な準備とインストール手順を以下に示します。

### 前提条件
このツールを使用するには以下の環境が必要です。
- **Python 3.x (3.10)** がインストールされていること
- **mrc2tif** コマンドがシステム上で利用できること

### 手順

#### 1. Python 3.x のインストール
Pythonがインストールされていない場合は、[Pythonの公式サイト](https://www.python.org/)から最新のPython 3.xをインストールしてください。インストール時に**「Add Python to PATH」**にチェックを入れておくと便利です。

#### 2. 必要なPythonパッケージのインストール
このツールは以下のパッケージを使用します。これらのパッケージをインストールするには、以下のコマンドをターミナルまたはコマンドプロンプトで実行してください。

```bash
pip install tkinter
```

`tkinter`は通常Pythonに組み込まれているため、インストールは不要な場合が多いですが、インポートエラーが発生する場合は必要になります。

#### 3. `mrc2tif` コマンドのインストール
このスクリプトでは、`mrc2tif`というコマンドラインツールを利用して`.mrc`ファイルを`.tif`形式に圧縮しています。以下の手順に従って、`mrc2tif`をインストールしてください。

1. [mrc2tifの公式サイト](https://example.com)または、必要なドキュメントからツールをダウンロードします。
2. ダウンロードしたファイルを解凍し、システムのPATHに追加します。これにより、コマンドラインから`mrc2tif`を直接使用できるようになります。

#### 4. スクリプトの実行
1. このPythonスクリプトを`.py`ファイルとして保存します（例: `compression_tool.py`）。
2. コマンドラインまたはターミナルを開き、スクリプトが保存されているディレクトリに移動します。
3. 以下のコマンドを実行して、GUIを起動します。

   ```bash
   python compression_tool.py
   ```

#### 5. GUIでの設定と使用
GUIが起動したら、前述の通りに設定を行い、圧縮を開始します。

--- 

### トラブルシューティング
- **`mrc2tif` が見つからないエラー**  
  このエラーが発生した場合、`mrc2tif`のインストールパスがシステムのPATHに正しく追加されているかを確認してください。

- **パッケージが見つからないエラー**  
  `tkinter`や`watchdog`が見つからない場合、`pip install`でのインストールが完了しているかを確認してください。

これで、ツールのインストールは完了です。





### ファイル圧縮ツール 説明書

このスクリプトは、Tkinterを使用してグラフィカルユーザーインターフェース（GUI）を作成し、`.mrc`ファイルをLZW圧縮形式の`.tif`ファイルに変換します。指定したディレクトリ内の新しいファイルを監視し、圧縮後に元の`.mrc`ファイルを削除するオプションも提供しています。また、GUIを通じて並列処理に使用するCPU数やファイル確認の間隔、入出力フォルダなどを設定できます。以下に各セクションの詳細を記載します。

---

### 1. コードの構成

1. **インポート**  
   `os`、`subprocess`、および `tkinter` などの必要なライブラリがインポートされています。
   - `os`と`glob`はファイル操作のために使用します。
   - `subprocess`は圧縮のための外部コマンド実行に使用します。
   - `concurrent.futures`から`ThreadPoolExecutor`をインポートし、並列処理を行います。
   - `tkinter`はGUI作成のために使用します。

2. **関数の定義**  
   - **`compress_file`**: `mrc2tif`コマンドラインツールを使用して、`.mrc`ファイルをLZW圧縮された`.tif`ファイルに変換します。出力ファイルが既に存在する場合は圧縮をスキップし、圧縮の成功・失敗をログに記録します。設定によっては圧縮後に元のファイルを削除します。

   - **`process_files`**: 指定した間隔で入力ディレクトリを監視し、新しい`.mrc`ファイルが見つかった場合は圧縮を行います。並列処理を行い、圧縮後に元ファイルを削除するオプションも含みます。

   - **`run_compression`**: GUIからの入力値を取得し、検証してからファイル処理を開始します。「Start Processing」ボタンを無効化し、複数の圧縮処理が開始されないようにします。

   - **`browse_input_dir` と `browse_output_dir`**: ファイルダイアログで入力および出力フォルダを選択します。

   - **`on_closing`**: GUIの閉じるボタン（Xボタン）をクリックしたときにクリーンに終了するためのプロトコルです。

3. **GUIの設定**  
   GUIには以下の入力項目やオプションがあります。
   - **Input Folder**: `.mrc`ファイルの保存先フォルダを選択します。
   - **Filename Wildcard**: ファイルパターンを指定します（デフォルトは `*.mrc`）。
   - **Output Folder**: 圧縮した`.tif`ファイルの保存先フォルダを選択します。
   - **CPU Count**: 並列処理に使用するCPUの数を指定します。
   - **File Check Interval**: 新しいファイルの監視間隔（秒）を設定します。
   - **Delete Original Files**: 圧縮成功後に元の`.mrc`ファイルを削除するオプション。
   - **Start Processing**: 圧縮を開始するボタン（クリック後は無効化され、複数回のクリックを防ぎます）。
   - **Text Output**: 圧縮の進捗ログを表示するためのウィジェット。

---

### 2. 使用手順

1. **入力設定**  
   - 「Input Folder」と「Output Folder」の横にある**Browse**をクリックし、ディレクトリを選択します。
   - 「Filename Wildcard」にワイルドカードパターンを入力します（例：`*.mrc`）。

2. **処理オプションの設定**  
   - 並列処理用のCPU数を「CPU Count」に入力します（一般的にはCPUのコア数と同じ値を推奨）。
   - ファイル確認の間隔を「File Check Interval（秒）」で設定します（例：10）。
   - 圧縮後に`.mrc`ファイルを削除したい場合は「Delete original files after compression」にチェックを入れます。

3. **圧縮の開始**  
   - **Start Processing** をクリックして、ファイルの圧縮を開始します。このボタンはクリック後に無効化され、複数のセッションが開始されるのを防ぎます。
   - 圧縮の進捗、エラー、またはスキップされたファイルに関するメッセージが出力ログに表示されます。

4. **ツールの停止**  
   - GUIのウィンドウ右上の **X** ボタンをクリックすると、すべての実行中のタスクが停止します。

---

### 3. 重要な注意点

- **エラーハンドリング**: 無効なディレクトリ、CPU数、または間隔が入力された場合、エラーメッセージが表示され、入力の修正を促します。
- **ファイル監視**: `check_interval` 秒ごとに新しい `.mrc` ファイルをチェックし、発見され次第圧縮します。
- **並列処理**: CPU数を高く設定しすぎると、システムのパフォーマンスに影響が出る可能性があるため、適切な値を設定してください。
- **ファイル削除**: 「Delete original files after compression」オプションを使用する際は注意してください。削除された `.mrc` ファイルは、このツールでは復元できません。

---

このツールは、特に大量の`.mrc`ファイルを効率的に圧縮したい場合に役立ちます。設定を柔軟に調整できるため、ユーザーのニーズに合わせて使用できます。